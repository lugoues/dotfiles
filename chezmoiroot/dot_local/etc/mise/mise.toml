[env]
_.file = "{{ env.MISE_CONFIG_DIR }}/env.yaml"

[tools]
"aqua:cue-lang/cue" = "latest"
"aqua:watchexec/watchexec" = "latest"
rust = "latest"
deno = "latest"

[tasks.compile]
run = "cue eval {{ env.MISE_CONFIG_DIR }}/config.cue --out toml >| {{ env.MISE_CONFIG_DIR }}/config.toml"
sources = ["{{ env.MISE_CONFIG_DIR }}/config.cue"]
outputs = ["{{ env.MISE_CONFIG_DIR }}/config.toml"]

[tasks.edit]
tools."aqua:cue-lang/cue" = "latest"
run = "$EDITOR {{ env.MISE_CONFIG_DIR }}/config.cue"
depends_post = ["compile"]

[hooks]
[[watch_files]]
patterns = ["{{ env.MISE_CONFIG_DIR }}/config.cue"]
run = "mise run compile"

[tasks.run-hooks]
depends = ['mise:extract-postinstall-hooks','sheldon:source-update']

[tasks.'sheldon:source-update']
hide=true
depends=['mise:extract-postinstall-hooks']
tools.'aqua:rossmacarthur/sheldon' = ''
run = 'sheldon source --update'

[tasks.'mise:extract-postinstall-hooks']
hide = true
tools.deno = ""
run='''
#!/usr/bin/env -S deno run --allow-run --allow-read

import { parse } from "jsr:@std/toml";

const { stdout } = await new Deno.Command("mise", {
  args: ["config", "ls", "--json"],
}).output();

const configs = JSON.parse(new TextDecoder().decode(stdout));

for (const config of configs) {
  const content = await Deno.readTextFile(config.path);
  const parsed = parse(content) as any;

  if (parsed.tools) {
    for (const [tool, settings] of Object.entries(parsed.tools)) {
      if ((settings as any).postinstall) {
        const cmd = (settings as any).postinstall;

        console.log(`Executing postinstall for ${tool}`);

        const result = await new Deno.Command("zsh", {
          args: ["-c", cmd],
        }).output();

        if (!result.success) {
          console.error(`Failed for ${tool}`);
          console.error(new TextDecoder().decode(result.stderr));
        }
      }
    }
  }
}
'''
